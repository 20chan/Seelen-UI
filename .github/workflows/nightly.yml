name: Nightly

on:
  push:
    branches:
      - master
    paths-ignore:
      - "**.md"
      - "documentation/**"
      - ".github/**"
      - "crowdin.yml"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  continuous-integration:
    uses: ./.github/workflows/ci.yml

  update-tag:
    needs: continuous-integration
    runs-on: ubuntu-latest
    outputs:
      nightly-version: ${{ steps.gen-version.outputs.result }}
    steps:
      - uses: actions/checkout@v4
      - run: git fetch --tags --prune

      - name: Create or update 'nightly' tag (force overwrite)
        run: |
          git tag -f nightly
          git push origin --force --tags

      - name: Generate Version
        id: gen-version
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            const currentVersion = packageJson.version;

            const timestamp = new Date().toISOString().replace(/[-:T]/g, '').slice(0, 14);
            const nightlyVersion = `${currentVersion}+${timestamp}`;

            return nightlyVersion;

  build:
    needs:
      - update-tag
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "windows-2025"
            args: ""

    runs-on: ${{ matrix.platform }}
    outputs:
      artifact-id: ${{ steps.artifact-upload-step.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Install Rust Nightly
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2025-09-12
      - uses: Swatinem/rust-cache@v2

      - name: Install frontend dependencies
        run: npm install

      - name: Install MSIX dependencies
        if: matrix.platform == 'windows-2025'
        shell: pwsh
        run: |
          # Install in parallel to save time
          $jobs = @(
            { winget install --id Microsoft.DotNet.AspNetCore.8 --accept-package-agreements --accept-source-agreements --force --silent },
            { winget install --id Microsoft.DotNet.DesktopRuntime.8 --accept-package-agreements --accept-source-agreements --force --silent },
            { winget install --id MarcinOtorowski.MSIXHero --accept-package-agreements --accept-source-agreements --force --silent }
          )
          $jobs | ForEach-Object { Start-Job -ScriptBlock $_ } | Wait-Job | Receive-Job

      - name: Set Version
        run: |
          npm run versionish -- --version ${{ needs.update-tag.outputs.nightly-version }}

      # If build fails we will be without a nightly build until the next push or workflow_dispatch
      - name: Build
        run: npx tauri build --no-bundle --ci

      - name: Bundle
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: npx tauri bundle --ci

      - name: Bundle MSIX
        if: matrix.platform == 'windows-2025'
        run: npx tsx scripts/bundle.msix.ts

      - name: Upload to artifacts
        id: artifact-upload-step
        uses: actions/upload-artifact@v4
        with:
          name: build-bundles
          path: target/release/bundle

  sign-and-upload:
    needs:
      - update-tag
      - build
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Submit to SignPath
        uses: signpath/github-action-submit-signing-request@v1
        with:
          api-token: "${{ secrets.SIGNPATH_API_TOKEN }}"
          organization-id: 1a9e9b37-229a-4540-a639-137deebee4e1
          project-slug: seelen-ui
          signing-policy-slug: test-signing
          github-artifact-id: "${{ needs.build.outputs.artifact-id }}"
          output-artifact-directory: target/release/signed-bundle

      - name: Upload Signed Installers to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nightly
          name: Seelen UI Nightly
          prerelease: true
          files: target/release/signed-bundle/**/*

  remove-old-artifacts:
    needs:
      - update-tag
      - sign-and-upload
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Remove Signatures and Old Artifacts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tagName = 'nightly';
            const nightlyVersion = ${{ needs.update-tag.outputs.nightly-version }};
            console.info(`nightlyVersion: ${nightlyVersion}`);

            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tagName,
            });

            const result = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
            });

            // Use Promise.all for parallel deletion
            const deletions = result.data
              .filter(asset => {
                if (asset.name.endsWith('.json')) return false;
                return !asset.name.includes(nightlyVersion) || asset.name.endsWith('.sig');
              })
              .map(asset => {
                console.info(`deleting ${asset.name}`);
                return github.rest.repos.deleteReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  asset_id: asset.id,
                });
              });

            await Promise.all(deletions);
